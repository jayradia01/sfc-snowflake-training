USE ROLE TRAININGDBA;
USE WAREHOUSE XSMALL;
USE DATABASE TRAINING;
USE SCHEMA PUBLIC;

-- ****************************** 1.- File Format ******************************
CREATE OR REPLACE FILE FORMAT TRAINING.PUBLIC.FILE_FORMAT_JSON_GENERIC
 TYPE = 'JSON'
 ENABLE_OCTAL = FALSE
 ALLOW_DUPLICATE  = TRUE
 STRIP_OUTER_ARRAY = TRUE
 STRIP_NULL_VALUES = TRUE
 IGNORE_UTF8_ERRORS = FALSE;

-- ****************************** 2.- Creating External Stages ******************************
CREATE OR REPLACE STAGE TRAINING.PUBLIC.STAGE_EXTERNAL_ACCOUNTS
  URL='s3://snowflake-s3-sfc-demo-ep/accounts/'
  FILE_FORMAT = TRAINING.PUBLIC.FILE_FORMAT_JSON_GENERIC;

CREATE OR REPLACE STAGE TRAINING.PUBLIC.STAGE_EXTERNAL_DEPOSITORS
  URL='s3://snowflake-s3-sfc-demo-ep/depositors/'
  FILE_FORMAT = TRAINING.PUBLIC.FILE_FORMAT_JSON_GENERIC;

-- ****************************** 3.- Exploring data from the S3 ******************************
-- ACCOUNT DATA
SELECT $1:ACCESSIBLE_BALANCE::VARCHAR,
       $1:ACCOUNT_BALANCE::VARCHAR,
       $1:ACCOUNT_STATUS_CODE::VARCHAR,
       $1:ACCOUNT_UID::VARCHAR,
       $1:CDIC_HOLD_STATUS_CODE::VARCHAR,
       $1:CURRENCY_CODE::VARCHAR,
       $1:CURRENT_CDIC_HOLD_AMOUNT::VARCHAR,
       $1:DEPOSITOR_ID::VARCHAR,
       $1:INSURANCE_DETERMINATION_CATEGORY_TYPE_CODE::VARCHAR,
       $1:PRODUCT_CODE::VARCHAR,
       $1:REGISTERED_ACCOUNT_FLAG::VARCHAR,
       $1:REGISTERED_PLAN_TYPE_CODE::VARCHAR,
       metadata$filename, metadata$file_row_number
FROM @TRAINING.PUBLIC.STAGE_EXTERNAL_ACCOUNTS (FILE_FORMAT => TRAINING.PUBLIC.FILE_FORMAT_JSON_GENERIC) SAMPLE(100 ROWS);

-- DEPOSITOR DATA
SELECT $1:ADDRESS::VARCHAR,
       $1:BIRTH_DATE::VARCHAR,
       $1:CITY::VARCHAR,
       $1:COUNTRY::VARCHAR,
       $1:DEPOSITOR_BRANCH::VARCHAR,
       $1:DEPOSITOR_ID::VARCHAR,
       $1:DEPOSITOR_TYPE_CODE::VARCHAR,
       $1:DEPOSITOR_UID::VARCHAR,
       $1:EMAIL::VARCHAR,
       $1:FIRST_NAME::VARCHAR,
       $1:LAST_NAME::VARCHAR,
       $1:PHONE::VARCHAR,
       $1:POSTAL_CODE::VARCHAR,
       $1:STATE::VARCHAR
FROM @TRAINING.PUBLIC.STAGE_EXTERNAL_DEPOSITORS (FILE_FORMAT => TRAINING.PUBLIC.FILE_FORMAT_JSON_GENERIC) SAMPLE (100 ROWS);

-- ****************************** 4.- Creating Table ******************************
-- COPY INTO APPROACH: ACCOUNTS DATASET
CREATE OR REPLACE TABLE TRAINING.PUBLIC.ACCOUNTS_RAW (
    ACCESSIBLE_BALANCE                         VARCHAR,
    ACCOUNT_BALANCE                            VARCHAR,
    ACCOUNT_STATUS_CODE                        VARCHAR,
    ACCOUNT_UID                                VARCHAR,
    CDIC_HOLD_STATUS_CODE                      VARCHAR,
    CURRENCY_CODE                              VARCHAR,
    CURRENT_CDIC_HOLD_AMOUNT                   VARCHAR,
    DEPOSITOR_ID                               VARCHAR,
    INSURANCE_DETERMINATION_CATEGORY_TYPE_CODE VARCHAR,
    PRODUCT_CODE                               VARCHAR,
    REGISTERED_ACCOUNT_FLAG                    VARCHAR,
    REGISTERED_PLAN_TYPE_CODE                  VARCHAR,
    FILE_NAME                                  VARCHAR,
    FILE_ROW_NUMBER                            VARCHAR
);

SELECT * FROM TRAINING.PUBLIC.ACCOUNTS_RAW;

COPY INTO TRAINING.PUBLIC.ACCOUNTS_RAW (ACCESSIBLE_BALANCE,ACCOUNT_BALANCE,ACCOUNT_STATUS_CODE,
                        ACCOUNT_UID,CDIC_HOLD_STATUS_CODE,CURRENCY_CODE,
                        CURRENT_CDIC_HOLD_AMOUNT,DEPOSITOR_ID,
                        INSURANCE_DETERMINATION_CATEGORY_TYPE_CODE,PRODUCT_CODE,
                        REGISTERED_ACCOUNT_FLAG,REGISTERED_PLAN_TYPE_CODE,
                        FILE_NAME,FILE_ROW_NUMBER)
FROM (
    SELECT $1:ACCESSIBLE_BALANCE::VARCHAR AS ACCESSIBLE_BALANCE,
       $1:ACCOUNT_BALANCE::VARCHAR AS ACCOUNT_BALANCE,
       $1:ACCOUNT_STATUS_CODE::VARCHAR AS ACCOUNT_STATUS_CODE,
       $1:ACCOUNT_UID::VARCHAR AS ACCOUNT_UID,
       $1:CDIC_HOLD_STATUS_CODE::VARCHAR AS CDIC_HOLD_STATUS_CODE,
       $1:CURRENCY_CODE::VARCHAR AS CURRENCY_CODE,
       $1:CURRENT_CDIC_HOLD_AMOUNT::VARCHAR AS CURRENT_CDIC_HOLD_AMOUNT,
       $1:DEPOSITOR_ID::VARCHAR AS DEPOSITOR_ID,
       $1:INSURANCE_DETERMINATION_CATEGORY_TYPE_CODE::VARCHAR AS INSURANCE_DETERMINATION_CATEGORY_TYPE_CODE,
       $1:PRODUCT_CODE::VARCHAR AS PRODUCT_CODE,
       $1:REGISTERED_ACCOUNT_FLAG::VARCHAR AS REGISTERED_ACCOUNT_FLAG,
       $1:REGISTERED_PLAN_TYPE_CODE::VARCHAR AS REGISTERED_PLAN_TYPE_CODE,
       metadata$filename::VARCHAR AS FILE_NAME,
       metadata$file_row_number::VARCHAR AS FILE_ROW_NUMBER
    FROM @TRAINING.PUBLIC.STAGE_EXTERNAL_ACCOUNTS
)
FILE_FORMAT = TRAINING.PUBLIC.FILE_FORMAT_JSON_GENERIC
PATTERN = '.*.json'
ON_ERROR = 'skip_file';

SELECT TOP 10 * FROM TRAINING.PUBLIC.ACCOUNTS_RAW;

-- CTAS APPROACH instead of COPY INTO
DROP TABLE IF EXISTS TRAINING.PUBLIC.ACCOUNTS_RAW;

CREATE OR REPLACE TABLE TRAINING.PUBLIC.ACCOUNTS_RAW AS
SELECT $1:ACCESSIBLE_BALANCE::VARCHAR AS ACCESSIBLE_BALANCE,
       $1:ACCOUNT_BALANCE::VARCHAR AS ACCOUNT_BALANCE,
       $1:ACCOUNT_STATUS_CODE::VARCHAR AS ACCOUNT_STATUS_CODE,
       $1:ACCOUNT_UID::VARCHAR AS ACCOUNT_UID,
       $1:CDIC_HOLD_STATUS_CODE::VARCHAR AS CDIC_HOLD_STATUS_CODE,
       $1:CURRENCY_CODE::VARCHAR AS CURRENCY_CODE,
       $1:CURRENT_CDIC_HOLD_AMOUNT::VARCHAR AS CURRENT_CDIC_HOLD_AMOUNT,
       $1:DEPOSITOR_ID::VARCHAR AS DEPOSITOR_ID,
       $1:INSURANCE_DETERMINATION_CATEGORY_TYPE_CODE::VARCHAR AS INSURANCE_DETERMINATION_CATEGORY_TYPE_CODE,
       $1:PRODUCT_CODE::VARCHAR AS PRODUCT_CODE,
       $1:REGISTERED_ACCOUNT_FLAG::VARCHAR AS REGISTERED_ACCOUNT_FLAG,
       $1:REGISTERED_PLAN_TYPE_CODE::VARCHAR AS REGISTERED_PLAN_TYPE_CODE,
       metadata$filename::VARCHAR AS FILE_NAME,
       metadata$file_row_number::VARCHAR AS FILE_ROW_NUMBER      
FROM @TRAINING.PUBLIC.STAGE_EXTERNAL_ACCOUNTS (FILE_FORMAT => TRAINING.PUBLIC.FILE_FORMAT_JSON_GENERIC);

SELECT TOP 10 * FROM TRAINING.PUBLIC.ACCOUNTS_RAW;
